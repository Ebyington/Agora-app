{"version":3,"sources":["features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","logo.svg","features/counter/Counter.js","App.js","reportWebVitals.js","index.js","features/counter/Counter.module.css"],"names":["fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","store","configureStore","reducer","counterReducer","Counter","count","useSelector","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","incrementValue","Number","className","styles","row","button","onClick","textbox","onChange","e","target","asyncButton","getState","App","src","logo","alt","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","container","document","getElementById","createRoot","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.0ef1391a.chunk.js","sourcesContent":["// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  decrement,\n  increment,\n  incrementByAmount,\n  incrementAsync,\n  incrementIfOdd,\n  selectCount,\n} from './counterSlice';\nimport styles from './Counter.module.css';\n\nexport function Counter() {\n  const count = useSelector(selectCount);\n  const dispatch = useDispatch();\n  const [incrementAmount, setIncrementAmount] = useState('2');\n\n  const incrementValue = Number(incrementAmount) || 0;\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(decrement())}\n        >\n          -\n        </button>\n        <span className={styles.value}>{count}</span>\n        <button\n          className={styles.button}\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(increment())}\n        >\n          +\n        </button>\n      </div>\n      <div className={styles.row}>\n        <input\n          className={styles.textbox}\n          aria-label=\"Set increment amount\"\n          value={incrementAmount}\n          onChange={(e) => setIncrementAmount(e.target.value)}\n        />\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementByAmount(incrementValue))}\n        >\n          Add Amount\n        </button>\n        <button\n          className={styles.asyncButton}\n          onClick={() => dispatch(incrementAsync(incrementValue))}\n        >\n          Add Async\n        </button>\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementIfOdd(incrementValue))}\n        >\n          Add If Odd\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport { Counter } from './features/counter/Counter';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Counter />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <span>\n          <span>Learn </span>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            React\n          </a>\n          <span>, </span>\n          <a\n            className=\"App-link\"\n            href=\"https://redux.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Redux\n          </a>\n          <span>, </span>\n          <a\n            className=\"App-link\"\n            href=\"https://redux-toolkit.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Redux Toolkit\n          </a>\n          ,<span> and </span>\n          <a\n            className=\"App-link\"\n            href=\"https://react-redux.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            React Redux\n          </a>\n        </span>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\n\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1C_4f\",\"value\":\"Counter_value__1d0te\",\"button\":\"Counter_button__1xpSV\",\"textbox\":\"Counter_textbox__3ODaX\",\"asyncButton\":\"Counter_asyncButton__2UAr3 Counter_button__1xpSV\"};"],"sourceRoot":""}